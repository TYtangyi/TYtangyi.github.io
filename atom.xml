<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://tytangyi.github.io/</id>
    <title>淡陌</title>
    <updated>2020-08-23T10:53:49.261Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://tytangyi.github.io/"/>
    <link rel="self" href="https://tytangyi.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://tytangyi.github.io/images/avatar.png</logo>
    <icon>https://tytangyi.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 淡陌</rights>
    <entry>
        <title type="html"><![CDATA[初学SpringCloud GateWay]]></title>
        <id>https://tytangyi.github.io/kRSF9SGOX/</id>
        <link href="https://tytangyi.github.io/kRSF9SGOX/">
        </link>
        <updated>2020-08-23T08:02:59.000Z</updated>
        <summary type="html"><![CDATA[<p>Spring Cloud Gateway 是 Spring 官方基于 Spring 5.0，Spring Boot 2.0 和 Project  Reactor 等技术开发的网关，旨在为微服务架构提供一种简单而有效的统一的 API 路由管理方式，统一访问接口。SpringCloud Gateway 作为 Spring Cloud 生态系中的网关，目标是替代 Netflix ZUUL，其不仅提供统一的路由方式，并且基于 Filter 链的方式提供了网关基本的功能，例如：安全，监控/埋点，和限流等。它是基于Nttey的响应式开发模式。</p>
]]></summary>
        <content type="html"><![CDATA[<p>Spring Cloud Gateway 是 Spring 官方基于 Spring 5.0，Spring Boot 2.0 和 Project  Reactor 等技术开发的网关，旨在为微服务架构提供一种简单而有效的统一的 API 路由管理方式，统一访问接口。SpringCloud Gateway 作为 Spring Cloud 生态系中的网关，目标是替代 Netflix ZUUL，其不仅提供统一的路由方式，并且基于 Filter 链的方式提供了网关基本的功能，例如：安全，监控/埋点，和限流等。它是基于Nttey的响应式开发模式。</p>
<!-- more -->
<h2 id="核心概念"><strong>核心概念</strong></h2>
<h3 id="路由route"><strong>路由（route）</strong></h3>
<p>是网关最基础的部分，路由信息由一个ID、一个目的URL、一组断言工厂和一组Filter组成。如果断言为真，则说明请求URL和配置的路由匹配。</p>
<h3 id="断言predicates"><strong>断言（predicates）</strong></h3>
<p>Java8中的断言函数，Spring Cloud Gateway中的断言函数输入类型是Spring5.0框架中的ServerWebExchange。Spring Cloud Gateway中的断言函数允许开发者去定义匹配来自Http Request中的任何信息，比如请求头和参数等。</p>
<h3 id="过滤器filter"><strong>过滤器（filter）</strong></h3>
<p>一个标准的Spring webFilter，Spring Cloud Gateway中的Filter分为两种类型，分别是Gateway Filter和Global Filter。过滤器Filter可以对请求和响应进行处理。</p>
<h2 id="搭建项目"><strong>搭建项目</strong></h2>
<h3 id="创建工程导入依赖"><strong>创建工程导入依赖</strong></h3>
<p>在项目中添加新模块api_gateway_server，并导入依赖</p>
<pre><code class="language-java">&lt;dependency&gt;
  &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
  &lt;artifactId&gt;spring-cloud-starter-gateway&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre>
<p>需要注意的是 SpringCloud Gateway使用的web框架为webflux，和SpringMVC不兼容。引入的限流组件是hystrix。redis底层不再使用jedis，而是lettuce。</p>
<h3 id="配置启动类"><strong>配置启动类</strong></h3>
<pre><code class="language-java">@EnableDiscoveryClient
@SpringBootApplication
public class GatewayServerApplication {

    public static void main(String[] args) {
        SpringApplication.run(GatewayServerApplication.class,args);
    }
}
</code></pre>
<h3 id="编写配置文件"><strong>编写配置文件</strong></h3>
<p>创建 application.yml 配置文件</p>
<pre><code class="language-java">server:
  port: 8080
spring:
  application:
    name: api-gateway-server
  cloud:
    gateway:
      routes:
      - id: product-service
        uri: http://127.0.0.1:9001
        predicates:
        - Path=/product/**
</code></pre>
<ul>
<li>id ：我们自定义的路由 ID，保持唯一</li>
<li>uri ：目标服务地址</li>
<li>predicates ：路由条件，Predicate 接受一个输入参数，返回一个布尔值结果。该接口包含多种默<br>
认方法来将 Predicate 组合成其他复杂的逻辑（比如：与，或，非）。</li>
<li>filters ：过滤规则，暂时没用<br>
上面这段配置的意思是，配置了一个 id 为 product-service的路由规则，当访问网关请求地址以<br>
product 开头时，会自动转发到地址： http://127.0.0.1:9001/ 。配置完成启动项目即可在浏览器<br>
访问进行测试，当我们访问地址 http://localhost:8080/product/1 时会展示页面展示如下：<br>
<img src="https://tytangyi.github.io//post-images/1598172835192.jpg" alt="" loading="lazy"></li>
</ul>
<h3 id="路由规则"><strong>路由规则</strong></h3>
<p>Spring Cloud Gateway 的功能很强大，前面我们只是使用了 predicates 进行了简单的条件匹配，其实Spring Cloud Gataway 帮我们内置了很多 Predicates 功能。在 Spring Cloud Gateway 中 Spring 利用Predicate 的特性实现了各种路由匹配规则，有通过 Header、请求参数等不同的条件来进行作为条件匹配到对应的路由。<br>
例如：</p>
<pre><code class="language-java">#路由断言之后匹配
spring:
  cloud:
    gateway:
      routes:
      - id: after_route
        uri: https://xxxx.com
        #路由断言之前匹配
        predicates:
        - After=xxxxx
</code></pre>
<h3 id="动态路由"><strong>动态路由</strong></h3>
<p>和zuul网关类似，在SpringCloud GateWay中也支持动态路由：即自动的从注册中心中获取服务列表并<br>
访问。</p>
<ul>
<li>添加注册中心依赖（这里以Eureka为例）：</li>
</ul>
<pre><code class="language-java">&lt;dependency&gt;
  &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
  &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre>
<ul>
<li>配置动态路由<br>
修改 application.yml 配置文件，添加eureka注册中心的相关配置，并修改访问映射的URL为服务名<br>
称</li>
</ul>
<pre><code>server:
  port: 8080
spring:
  application:
    name: api-gateway-server
  cloud:
    gateway:
      routes:
      - id: product-service
        uri: lb://service-product
        predicates:
        - Path=/product/**
eureka:
  client:
    service-url:
      defaultZone: http://localhost:9000/eureka/
  instance:
    prefer-ip-address: true
</code></pre>
<ul>
<li>uri：uri以 lb: //开头（lb代表从注册中心获取服务），后面接的就是你需要转发到的服务名称</li>
</ul>
<h3 id="重写转发路径"><strong>重写转发路径</strong></h3>
<p>在SpringCloud Gateway中，路由转发是直接将匹配的路由path直接拼接到映射路径（URI）之后，那<br>
么在微服务开发中往往没有那么便利。这里就可以通过RewritePath机制来进行路径重写。<br>
<strong>修改 application.yml</strong>，将匹配路径改为 <strong>/product -service/</strong>**</p>
<pre><code class="language-java">server:
  port: 8080
spring:
  application:
    name: api-gateway-server
  cloud:
    gateway:
      routes:
      - id: product-service #保持唯一
        uri: lb://service-product
        predicates:
        - Path=/product-service/**
</code></pre>
<p>重新启动网关，我们在浏览器访问 http://127.0.0.1:8080/product-service/product/1，会抛出404。这是由于路由转发规则默认转发到商品微服务（ http://127.0.0.1:9001/product-<br>
service/product/1 ）路径上，而商品微服务又没有 product -service 对应的映射配置。<br>
添加RewritePath重写转发路径：</p>
<pre><code>server:
  port: 8080
spring:
  application:
    name: api-gateway-server
  cloud:
    gateway:
      routes:
      - id: product-service #保持唯一
        uri: lb://service-product
        predicates:
        - Path=/product-service/**
        filters:
        - RewritePath=/product-service/(?&lt;segment&gt;.*),/$\{segment}
</code></pre>
<p>通过 RewritePath配置重写转发的url，将/product-service/(?.*)，重写为{segment}，然后转发到订单微服务。比如在网页上请求 http://localhost:8080/product-service/product，此时会将请求转发到http://127.0.0.1:9002/product/1（ 值得注意的是在 yml文档中 $ 要写成 $\）</p>
<h3 id="过滤器"><strong>过滤器</strong></h3>
<p>Spring Cloud Gateway除了具备请求路由功能之外，也支持对请求的过滤。通过Zuul网关类似，也是通<br>
过过滤器的形式来实现的。那么接下来我们一起来研究一下Gateway中的过滤器</p>
<ul>
<li>过滤器基础<br>
Spring Cloud Gateway 的 Filter 的生命周期不像 Zuul 的那么丰富，它只有两个：“pre” 和 “post”。<br>
<strong>PRE</strong>：这种过滤器在请求被路由之前调用。我们可利用这种过滤器实现身份验证、在集群中选择<br>
请求的微服务、记录调试信息等。<br>
<strong>POST</strong>：这种过滤器在路由到微服务以后执行。这种过滤器可用来为响应添加标准的 HTTP<br>
Header、收集统计信息和指标、将响应从微服务发送给客户端等。</li>
<li>过滤器类型<br>
Spring Cloud Gateway 的 Filter 从作用范围可分为另外两种GatewayFilter与GlobalFilter。<br>
<strong>GatewayFilter</strong>：应用到单个路由或者一个分组的路由上。<br>
<strong>GlobalFilter</strong>：应用到所有的路由上。</li>
<li>局部过滤器<br>
局部过滤器（GatewayFilter），是针对单个路由的过滤器。可以对访问的URL过滤，进行切面处理。在<br>
Spring Cloud Gateway中通过GatewayFilter的形式内置了很多不同类型的局部过滤器。</li>
<li>全局过滤器<br>
全局过滤器（GlobalFilter）作用于所有路由，Spring Cloud Gateway 定义了Global Filter接口，用户可以自定义实现自己的Global Filter。通过全局过滤器可以实现对权限的统一校验，安全性验证等功能，并且全局过滤器也是程序员使用比较多的过滤器。</li>
</ul>
<h3 id="统一鉴权"><strong>统一鉴权</strong></h3>
<ul>
<li>鉴权逻辑<br>
1.当客户端第一次请求服务时，服务端对用户进行信息认证（登录）<br>
2.认证通过，将用户信息进行加密形成 token，返回给客户端，作为登录凭证<br>
3.以后每次请求，客户端都携带认证的 token<br>
4.服务端对 token进行解密，判断是否有效。<br>
下面的我们自定义一个GlobalFilter，去校验所有请求的请求参数中是否包含“token”，如何不包含请求<br>
参数“token”则不转发路由，否则执行正常的逻辑。</li>
</ul>
<pre><code class="language-java">@Component
public class LoginFilter implements GlobalFilter, Ordered {

    /**
     * 执行过滤器中的业务逻辑
     *      对请求参数中的access-token进行判断
     *      存在认证成功，否则失败
     *
     * @param exchange
     * @param chain
     * @return
     */
    @Override
    public Mono&lt;Void&gt; filter(ServerWebExchange exchange, GatewayFilterChain chain) {
        System.out.println(&quot;执行了自定义的全局过滤器&quot;);
        String token = exchange.getRequest().getQueryParams().getFirst(&quot;access-token&quot;);
        if (StringUtils.isEmpty(token)){
            System.out.println(&quot;未登录&quot;);
            exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);
            return exchange.getResponse().setComplete(); //请求结束
        }
        return chain.filter(exchange); //继续向下执行
    }

    /**
     * 指定过滤器执行顺序，返回值越小，执行优先级越高
     * @return
     */
    @Override
    public int getOrder() {
        return 0;
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java自定义注解的一次使用]]></title>
        <id>https://tytangyi.github.io/6nS7y2LUK/</id>
        <link href="https://tytangyi.github.io/6nS7y2LUK/">
        </link>
        <updated>2020-08-08T08:48:23.000Z</updated>
        <summary type="html"><![CDATA[<p>最近公司提出了一个需求，一些涉及到发送验证码的接口如果是在非生产环境和在白名单中的手机号实际不发送验证码。我的想法是在切面当中处理，当调用这些接口时会在切面中判断是否符合这两种条件，符合就直接返回一个标识，否则继续走接口业务逻辑。</p>
]]></summary>
        <content type="html"><![CDATA[<p>最近公司提出了一个需求，一些涉及到发送验证码的接口如果是在非生产环境和在白名单中的手机号实际不发送验证码。我的想法是在切面当中处理，当调用这些接口时会在切面中判断是否符合这两种条件，符合就直接返回一个标识，否则继续走接口业务逻辑。</p>
<!-- more -->
<h2 id="定义注解"><strong>定义注解</strong></h2>
<p>统一处理这些接口，首先可以自定义一个注解。</p>
<pre><code class="language-java">@Target({ElementType.METHOD})
@Retention(RetentionPolicy.RUNTIME)
public @interface SendCode {
}
</code></pre>
<h2 id="定义扫描切面"><strong>定义扫描切面</strong></h2>
<p>接着定义一个切面扫描加入这个注解的接口</p>
<h3 id="获取容器对象运行环境"><strong>获取容器对象，运行环境</strong></h3>
<p>这部分获取了运行环境(dev、pre、pro..)，定义JackSon和发送标识</p>
<pre><code class="language-java">@Aspect
@Component
@Slf4j
public class SendCodeAspect {

    @Autowired
    private UserService userService;

    private ObjectMapper mapper = new ObjectMapper();
// 获取当前的运行环境
    @Value(&quot;${system.envrionment}&quot;)
    private String env;

    //发送标识
    private String sendCodeFlag = false;

    public SendCodeAspect() {
        this.mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
    }
</code></pre>
<h3 id="扫描切点接口参数校验"><strong>扫描切点，接口参数校验</strong></h3>
<pre><code class="language-java">  // 定义切点，扫描注解所在路径
    @Pointcut(&quot;@annotation(...SendCode)&quot;)
    public void Pointcut() {
    }
// 环绕通知
    @Around(&quot;Pointcut()&quot;)
    public Object aspectMethod(ProceedingJoinPoint point) throws Throwable {
        // 获取所传的参数
        Object[] args = point.getArgs();
        // 接口的路径
        String path = point.getSignature().getDeclaringTypeName() + &quot;.&quot; + point.getSignature().getName();
        log.info(&quot;发送验证码切面执行路径：&quot; + path);
        Class&lt;?&gt;[] selfParameterTypes = ((MethodSignature) point.getSignature()).getMethod().getParameterTypes();
        Method method = point.getSignature().getDeclaringType().getMethod(point.getSignature().getName(), selfParameterTypes);
        log.info(&quot;发送验证码切面执行方法：&quot; + method);
        log.info(&quot;当前环境:&quot;+env);

        // 不校验pro
        if (!&quot;pro&quot;.equals(env)) {
            // 查询手机号白名单
            List&lt;String&gt; stringList = userService.selectUserMobileWhite();
            // 手机号主要有这些字段
            List&lt;String&gt; list = Arrays.asList(&quot;mobile&quot;, &quot;userName&quot;,&quot;email&quot;);
            //Map&lt;String, Object&gt; params = getNameAndValue(point);
            // 判断传所传的参数中是否在手机号白名单中
            for (String li : list) {
                // 使用Jackson序列化参数
                String json = mapper.writeValueAsString(args[0]);
                JsonNode jsonNode = mapper.readTree(json);
                if (Objects.nonNull(jsonNode.get(li))) {
                    if (stringList.contains(jsonNode.get(li).asText(&quot;Default&quot;))) {
                        log.info(&quot;--------------手机号白名单通过-------------&quot;);
                        sendCodeFlag = true;
                        return sendCodeFlag;
                    }
                }
            }
        }
        // 不满足条件继续执行接口逻辑
        return point.proceed(args);
    }
}
</code></pre>
<p>还可以获取指定参数和传参字段</p>
<pre><code class="language-java">// 获取指定参数和传参字段
    private Map&lt;String, Object&gt; getNameAndValue(ProceedingJoinPoint point) {
        Map&lt;String, Object&gt; param = Maps.newLinkedHashMap();

        Object[] paramValues = point.getArgs();
        String[] paramNames = ((CodeSignature) point.getSignature()).getParameterNames();

        param.put(paramNames[0], paramValues[0]);
        return param;
    }
</code></pre>
<p>以上就是切面与注解的搭配使用</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java 8 Optional 类]]></title>
        <id>https://tytangyi.github.io/初识Java 8 Optional/</id>
        <link href="https://tytangyi.github.io/初识Java 8 Optional/">
        </link>
        <updated>2020-08-01T10:41:10.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  在日常开发中经常会遇到调用一个方法获得的返回值可能为空，需要对null进行判断，例如</p>
<pre><code class="language-java">if (Objects.nonNull()){
    //业务逻辑..
}
if (StringUtils.isNotEmpty()){
    //业务逻辑
}
等等....
</code></pre>
<p>然后会做一些相应处理或者抛出NullPointerException,为了减少null值判断，Java8中引入了Optional类。</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  在日常开发中经常会遇到调用一个方法获得的返回值可能为空，需要对null进行判断，例如</p>
<pre><code class="language-java">if (Objects.nonNull()){
    //业务逻辑..
}
if (StringUtils.isNotEmpty()){
    //业务逻辑
}
等等....
</code></pre>
<p>然后会做一些相应处理或者抛出NullPointerException,为了减少null值判断，Java8中引入了Optional类。</p>
<!-- more -->
<p><a href="https://github.com/TYtangyi">Github</a></p>
<h2 id="前言"><strong>前言</strong>👇</h2>
<p>平常开发中在对属性值为null时，通常使用下面这些方式</p>
<pre><code class="language-java">if (Objects.nonNull()){
    //业务逻辑..
}
if (StringUtils.isNotEmpty()){
    //业务逻辑
}
等等.....
</code></pre>
<p>如果某个方法中需要对多个属性或返回值对null判断，代码会变得较为臃肿。那能不能对这种处理方式简化呢？在Java8中引入了Optional类，Optional类是一个可以为null的容器对象，该类的多个方法简化了对null或者非null的处理</p>
<h2 id="主要方法"><strong>主要方法</strong></h2>
<h3 id="of"><strong>of</strong></h3>
<p>为非null值创建一个Optional</p>
<pre><code class="language-java">User user = new User();
Optional&lt;String&gt; userName = Optional.of(&quot;aaa&quot;);
 //传入参数为null，抛出NullPointerException.
Optional&lt;String&gt; nullValue = Optional.of(null);
</code></pre>
<h3 id="ofnullable"><strong>ofNullable</strong></h3>
<p>为指定值创建一个Optional，如果指定值为null，则返回一个空的Optional</p>
<pre><code class="language-java">//创建一个不包含任何值的Optional实例
//输出：Optional.empty
Optional b = Optional.ofNullable(null);
</code></pre>
<h3 id="ispresent"><strong>isPresent</strong></h3>
<p>检查之是否存在，存在返回true，否则返回false</p>
<pre><code class="language-java">Optional&lt;String&gt; userName = Optional.of(&quot;aaa&quot;);
if (userName.isPresent()){
    //输出：aaa
    System.out.println(userName.get());
}
Optional em = Optional.ofNullable(null);
//em.isPresent()为false
if (em.isPresent()){
        System.out.println(em.get());
}
</code></pre>
<h3 id="get"><strong>get</strong></h3>
<p>Optional有值则将其返回，否则抛出NoSuchElementException。</p>
<pre><code class="language-java">Optional em = Optional.ofNullable(null);
em.get();
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://tytangyi.github.io//post-images/1596277400482.png" alt="image" loading="lazy"></figure>
<pre><code class="language-java">Optional em = Optional.ofNullable(null);
try {
    System.out.println(em.get());
}catch (NoSuchElementException e){
    System.out.println(e.getMessage());//输出：No value present
}
</code></pre>
<h3 id="ifpresent"><strong>ifPresent</strong></h3>
<p>如果Optional实例有值则为其调用consumer ,否则不做处理。Consumer类包含一个抽象方法。该抽象方法对传入的值进行处理，但没有返回值。如果Optional实例有值，调用ifPresent()可以接受接口段或lambda表达式。例如下面代码：</p>
<pre><code class="language-java">//lambda表达式对Optional的值调用consumer处理
username.ifPresent((value) -&gt; {
     System.out.println(value.length());
});
</code></pre>
<h3 id="orelse"><strong>orElse</strong></h3>
<p>orElse(T other)在取这个对象的时候，设置一个默认对象（默认值）；如果当前对象为null的时候，就返回默认对象</p>
<pre><code class="language-java">System.out.println(userName.orElse(&quot;no value&quot;));//输出：aaa
System.out.println(em.orElse(&quot;no value&quot;));//输出：no value
</code></pre>
<h3 id="orelseget"><strong>orElseGet</strong></h3>
<pre><code class="language-java">orElseGet(Supplier&lt;? extends T&gt; other)
</code></pre>
<p>跟orElse是一样的，区别只是参数，传入了一个函数式参数<a href="https://sanaulla.info/2013/04/02/supplier-interface-in-java-util-function-package-in-java-8/">Supplier</a>。如果Optional对象实例为空，可以生成默认值。</p>
<pre><code class="language-java">System.out.println(userName.orElseGet(()-&gt;&quot;default value&quot;));//输出：aaa
System.out.println(em.orElseGet(()-&gt;&quot;default value&quot;));//输出：default value
</code></pre>
<h3 id="orelsethrow"><strong>orElseThrow</strong></h3>
<p>为null时，抛出<a href="https://sanaulla.info/2013/04/02/supplier-interface-in-java-util-function-package-in-java-8/">Supplier</a>接口的异常。查看源码：<br>
<img src="https://tytangyi.github.io//post-images/1596352988.png" alt="image" loading="lazy"></p>
<h3 id="map"><strong>map</strong></h3>
<p>参数为<a href="https://sanaulla.info/2013/03/27/function-interface-a-functional-interface-in-the-java-util-function-package-in-java-8/">Function</a>接口类型，查看源码如下：<br>
<img src="https://tytangyi.github.io//post-images/1596354459.png" alt="image" loading="lazy"><br>
如果为null，则返回空Optional，否则调用Function的apply()。</p>
<h3 id="flatmap"><strong>flatMap</strong></h3>
<p>功能与map相似，区别在于Function类型参数的结果类型必须为Optional类的实例，返回值类型也必须为Optional类的实例。源码如下：<br>
<img src="https://tytangyi.github.io//post-images/1596357487.png" alt="image" loading="lazy"></p>
<pre><code class="language-java">userName = userName.flatMap(value-&gt;Optional.of(value.toUpperCase()));
System.out.println(userName.orElse(&quot;no value&quot;));//输出：AAA
</code></pre>
<h3 id="filter"><strong>filter</strong></h3>
<p>调用filter传入<a href="https://sanaulla.info/2013/04/01/predicate-and-consumer-interface-in-java-util-function-package-in-java-8/">Predicate</a>接口类型的参数，通过传入限定条件对Optional实例的值进行过滤<br>
<img src="https://tytangyi.github.io//post-images/1596359755.png" alt="image" loading="lazy"></p>
<pre><code class="language-java">Optional&lt;String&gt; len = userName.filter(value -&gt; value.length() &gt; 2);
System.out.println(len.orElse(&quot;长度不大于2&quot;));//输出：aaa

Optional&lt;String&gt; u = Optional.of(&quot;a&quot;);
Optional&lt;String&gt; le = u.filter(v -&gt; v.length() &gt; 2);
System.out.println(le.orElse(&quot;长度不大于2&quot;));//输出：长度不大于2
</code></pre>
<p>以上就是Optional类的主要方法</p>
]]></content>
    </entry>
</feed>