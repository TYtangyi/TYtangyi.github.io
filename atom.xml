<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://tytangyi.github.io/</id>
    <title>淡陌</title>
    <updated>2020-08-17T04:37:56.932Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://tytangyi.github.io/"/>
    <link rel="self" href="https://tytangyi.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://tytangyi.github.io/images/avatar.png</logo>
    <icon>https://tytangyi.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 淡陌</rights>
    <entry>
        <title type="html"><![CDATA[Java自定义注解的一次使用]]></title>
        <id>https://tytangyi.github.io/6nS7y2LUK/</id>
        <link href="https://tytangyi.github.io/6nS7y2LUK/">
        </link>
        <updated>2020-08-08T08:48:23.000Z</updated>
        <summary type="html"><![CDATA[<p>最近公司提出了一个需求，一些涉及到发送验证码的接口如果是在非生产环境和在白名单中的手机号实际不发送验证码。我的想法是在切面当中处理，当调用这些接口时会在切面中判断是否符合这两种条件，符合就直接返回一个标识，否则继续走接口业务逻辑。</p>
]]></summary>
        <content type="html"><![CDATA[<p>最近公司提出了一个需求，一些涉及到发送验证码的接口如果是在非生产环境和在白名单中的手机号实际不发送验证码。我的想法是在切面当中处理，当调用这些接口时会在切面中判断是否符合这两种条件，符合就直接返回一个标识，否则继续走接口业务逻辑。</p>
<!-- more -->
<h2 id="定义注解"><strong>定义注解</strong></h2>
<p>统一处理这些接口，首先可以自定义一个注解。</p>
<pre><code class="language-java">@Target({ElementType.METHOD})
@Retention(RetentionPolicy.RUNTIME)
public @interface SendCode {
}
</code></pre>
<h2 id="定义扫描切面"><strong>定义扫描切面</strong></h2>
<p>接着定义一个切面扫描加入这个注解的接口</p>
<h3 id="获取容器对象运行环境"><strong>获取容器对象，运行环境</strong></h3>
<p>这部分获取了运行环境(dev、pre、pro..)，定义JackSon和发送标识</p>
<pre><code class="language-java">@Aspect
@Component
@Slf4j
public class SendCodeAspect {

    @Autowired
    private UserService userService;

    private ObjectMapper mapper = new ObjectMapper();
// 获取当前的运行环境
    @Value(&quot;${system.envrionment}&quot;)
    private String env;

    //发送标识
    private String sendCodeFlag = false;

    public SendCodeAspect() {
        this.mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
    }
</code></pre>
<h3 id="扫描切点接口参数校验"><strong>扫描切点，接口参数校验</strong></h3>
<pre><code class="language-java">  // 定义切点，扫描注解所在路径
    @Pointcut(&quot;@annotation(...SendCode)&quot;)
    public void Pointcut() {
    }
// 环绕通知
    @Around(&quot;Pointcut()&quot;)
    public Object aspectMethod(ProceedingJoinPoint point) throws Throwable {
        // 获取所传的参数
        Object[] args = point.getArgs();
        // 接口的路径
        String path = point.getSignature().getDeclaringTypeName() + &quot;.&quot; + point.getSignature().getName();
        log.info(&quot;发送验证码切面执行路径：&quot; + path);
        Class&lt;?&gt;[] selfParameterTypes = ((MethodSignature) point.getSignature()).getMethod().getParameterTypes();
        Method method = point.getSignature().getDeclaringType().getMethod(point.getSignature().getName(), selfParameterTypes);
        log.info(&quot;发送验证码切面执行方法：&quot; + method);
        log.info(&quot;当前环境:&quot;+env);

        // 不校验pro
        if (!&quot;pro&quot;.equals(env)) {
            // 查询手机号白名单
            List&lt;String&gt; stringList = userService.selectUserMobileWhite();
            // 手机号主要有这些字段
            List&lt;String&gt; list = Arrays.asList(&quot;mobile&quot;, &quot;userName&quot;,&quot;email&quot;);
            //Map&lt;String, Object&gt; params = getNameAndValue(point);
            // 判断传所传的参数中是否在手机号白名单中
            for (String li : list) {
                // 使用Jackson序列化参数
                String json = mapper.writeValueAsString(args[0]);
                JsonNode jsonNode = mapper.readTree(json);
                if (Objects.nonNull(jsonNode.get(li))) {
                    if (stringList.contains(jsonNode.get(li).asText(&quot;Default&quot;))) {
                        log.info(&quot;--------------手机号白名单通过-------------&quot;);
                        sendCodeFlag = true;
                        return sendCodeFlag;
                    }
                }
            }
        }
        // 不满足条件继续执行接口逻辑
        return point.proceed(args);
    }
}
</code></pre>
<p>还可以获取指定参数和传参字段</p>
<pre><code class="language-java">// 获取指定参数和传参字段
    private Map&lt;String, Object&gt; getNameAndValue(ProceedingJoinPoint point) {
        Map&lt;String, Object&gt; param = Maps.newLinkedHashMap();

        Object[] paramValues = point.getArgs();
        String[] paramNames = ((CodeSignature) point.getSignature()).getParameterNames();

        param.put(paramNames[0], paramValues[0]);
        return param;
    }
</code></pre>
<p>以上就是切面与注解的搭配使用</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java 8 Optional 类]]></title>
        <id>https://tytangyi.github.io/初识Java 8 Optional/</id>
        <link href="https://tytangyi.github.io/初识Java 8 Optional/">
        </link>
        <updated>2020-08-01T10:41:10.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  在日常开发中经常会遇到调用一个方法获得的返回值可能为空，需要对null进行判断，例如</p>
<pre><code class="language-java">if (Objects.nonNull()){
    //业务逻辑..
}
if (StringUtils.isNotEmpty()){
    //业务逻辑
}
等等....
</code></pre>
<p>然后会做一些相应处理或者抛出NullPointerException,为了减少null值判断，Java8中引入了Optional类。</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  在日常开发中经常会遇到调用一个方法获得的返回值可能为空，需要对null进行判断，例如</p>
<pre><code class="language-java">if (Objects.nonNull()){
    //业务逻辑..
}
if (StringUtils.isNotEmpty()){
    //业务逻辑
}
等等....
</code></pre>
<p>然后会做一些相应处理或者抛出NullPointerException,为了减少null值判断，Java8中引入了Optional类。</p>
<!-- more -->
<p><a href="https://github.com/TYtangyi">Github</a></p>
<h2 id="前言"><strong>前言</strong>👇</h2>
<p>平常开发中在对属性值为null时，通常使用下面这些方式</p>
<pre><code class="language-java">if (Objects.nonNull()){
    //业务逻辑..
}
if (StringUtils.isNotEmpty()){
    //业务逻辑
}
等等.....
</code></pre>
<p>如果某个方法中需要对多个属性或返回值对null判断，代码会变得较为臃肿。那能不能对这种处理方式简化呢？在Java8中引入了Optional类，Optional类是一个可以为null的容器对象，该类的多个方法简化了对null或者非null的处理</p>
<h2 id="主要方法"><strong>主要方法</strong></h2>
<h3 id="of"><strong>of</strong></h3>
<p>为非null值创建一个Optional</p>
<pre><code class="language-java">User user = new User();
Optional&lt;String&gt; userName = Optional.of(&quot;aaa&quot;);
 //传入参数为null，抛出NullPointerException.
Optional&lt;String&gt; nullValue = Optional.of(null);
</code></pre>
<h3 id="ofnullable"><strong>ofNullable</strong></h3>
<p>为指定值创建一个Optional，如果指定值为null，则返回一个空的Optional</p>
<pre><code class="language-java">//创建一个不包含任何值的Optional实例
//输出：Optional.empty
Optional b = Optional.ofNullable(null);
</code></pre>
<h3 id="ispresent"><strong>isPresent</strong></h3>
<p>检查之是否存在，存在返回true，否则返回false</p>
<pre><code class="language-java">Optional&lt;String&gt; userName = Optional.of(&quot;aaa&quot;);
if (userName.isPresent()){
    //输出：aaa
    System.out.println(userName.get());
}
Optional em = Optional.ofNullable(null);
//em.isPresent()为false
if (em.isPresent()){
        System.out.println(em.get());
}
</code></pre>
<h3 id="get"><strong>get</strong></h3>
<p>Optional有值则将其返回，否则抛出NoSuchElementException。</p>
<pre><code class="language-java">Optional em = Optional.ofNullable(null);
em.get();
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://tytangyi.github.io//post-images/1596277400482.png" alt="image" loading="lazy"></figure>
<pre><code class="language-java">Optional em = Optional.ofNullable(null);
try {
    System.out.println(em.get());
}catch (NoSuchElementException e){
    System.out.println(e.getMessage());//输出：No value present
}
</code></pre>
<h3 id="ifpresent"><strong>ifPresent</strong></h3>
<p>如果Optional实例有值则为其调用consumer ,否则不做处理。Consumer类包含一个抽象方法。该抽象方法对传入的值进行处理，但没有返回值。如果Optional实例有值，调用ifPresent()可以接受接口段或lambda表达式。例如下面代码：</p>
<pre><code class="language-java">//lambda表达式对Optional的值调用consumer处理
username.ifPresent((value) -&gt; {
     System.out.println(value.length());
});
</code></pre>
<h3 id="orelse"><strong>orElse</strong></h3>
<p>orElse(T other)在取这个对象的时候，设置一个默认对象（默认值）；如果当前对象为null的时候，就返回默认对象</p>
<pre><code class="language-java">System.out.println(userName.orElse(&quot;no value&quot;));//输出：aaa
System.out.println(em.orElse(&quot;no value&quot;));//输出：no value
</code></pre>
<h3 id="orelseget"><strong>orElseGet</strong></h3>
<pre><code class="language-java">orElseGet(Supplier&lt;? extends T&gt; other)
</code></pre>
<p>跟orElse是一样的，区别只是参数，传入了一个函数式参数<a href="https://sanaulla.info/2013/04/02/supplier-interface-in-java-util-function-package-in-java-8/">Supplier</a>。如果Optional对象实例为空，可以生成默认值。</p>
<pre><code class="language-java">System.out.println(userName.orElseGet(()-&gt;&quot;default value&quot;));//输出：aaa
System.out.println(em.orElseGet(()-&gt;&quot;default value&quot;));//输出：default value
</code></pre>
<h3 id="orelsethrow"><strong>orElseThrow</strong></h3>
<p>为null时，抛出<a href="https://sanaulla.info/2013/04/02/supplier-interface-in-java-util-function-package-in-java-8/">Supplier</a>接口的异常。查看源码：<br>
<img src="https://tytangyi.github.io//post-images/1596352988.png" alt="image" loading="lazy"></p>
<h3 id="map"><strong>map</strong></h3>
<p>参数为<a href="https://sanaulla.info/2013/03/27/function-interface-a-functional-interface-in-the-java-util-function-package-in-java-8/">Function</a>接口类型，查看源码如下：<br>
<img src="https://tytangyi.github.io//post-images/1596354459.png" alt="image" loading="lazy"><br>
如果为null，则返回空Optional，否则调用Function的apply()。</p>
<h3 id="flatmap"><strong>flatMap</strong></h3>
<p>功能与map相似，区别在于Function类型参数的结果类型必须为Optional类的实例，返回值类型也必须为Optional类的实例。源码如下：<br>
<img src="https://tytangyi.github.io//post-images/1596357487.png" alt="image" loading="lazy"></p>
<pre><code class="language-java">userName = userName.flatMap(value-&gt;Optional.of(value.toUpperCase()));
System.out.println(userName.orElse(&quot;no value&quot;));//输出：AAA
</code></pre>
<h3 id="filter"><strong>filter</strong></h3>
<p>调用filter传入<a href="https://sanaulla.info/2013/04/01/predicate-and-consumer-interface-in-java-util-function-package-in-java-8/">Predicate</a>接口类型的参数，通过传入限定条件对Optional实例的值进行过滤<br>
<img src="https://tytangyi.github.io//post-images/1596359755.png" alt="image" loading="lazy"></p>
<pre><code class="language-java">Optional&lt;String&gt; len = userName.filter(value -&gt; value.length() &gt; 2);
System.out.println(len.orElse(&quot;长度不大于2&quot;));//输出：aaa

Optional&lt;String&gt; u = Optional.of(&quot;a&quot;);
Optional&lt;String&gt; le = u.filter(v -&gt; v.length() &gt; 2);
System.out.println(le.orElse(&quot;长度不大于2&quot;));//输出：长度不大于2
</code></pre>
<p>以上就是Optional类的主要方法</p>
]]></content>
    </entry>
</feed>