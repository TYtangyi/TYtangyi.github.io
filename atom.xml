<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://tytangyi.github.io/</id>
    <title>Gridea</title>
    <updated>2020-08-01T14:58:23.448Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://tytangyi.github.io/"/>
    <link rel="self" href="https://tytangyi.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://tytangyi.github.io/images/avatar.png</logo>
    <icon>https://tytangyi.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[Java 8 Optional 类]]></title>
        <id>https://tytangyi.github.io/post/初识Java 8 Optional/</id>
        <link href="https://tytangyi.github.io/post/初识Java 8 Optional/">
        </link>
        <updated>2020-08-01T10:41:10.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  在日常开发中经常会遇到调用一个方法获得的返回值可能为空，需要对null进行判断，例如<br>
然后会做一些相应处理或者抛出NullPointerException,为了减少null值判断，Java8中引入了Optional类。<br>
Optional类是一个可以为null的容器对象，其中isPresent()方法返回true则证明值存在，调用get()返回该对象。</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  在日常开发中经常会遇到调用一个方法获得的返回值可能为空，需要对null进行判断，例如<br>
然后会做一些相应处理或者抛出NullPointerException,为了减少null值判断，Java8中引入了Optional类。<br>
Optional类是一个可以为null的容器对象，其中isPresent()方法返回true则证明值存在，调用get()返回该对象。</p>
<!-- more -->
<p><a href="https://github.com/TYtangyi">Github</a></p>
<h2 id="前言">前言👇</h2>
<p>平常开发中在对属性值为null时，通常使用下面这些方式</p>
<pre><code class="language-java">if (Objects.nonNull()){
    //业务逻辑..
}
if (StringUtils.isNotEmpty()){
    //业务逻辑
}
等等.....
</code></pre>
<p>如果某个方法中需要对多个属性或返回值对null判断，代码会变得较为臃肿。那能不能对这种处理方式简化呢？在Java8中引入了Optional类，该类的多个方法简化了对null或者非null的处理</p>
<h2 id="主要方法">主要方法</h2>
<h3 id="of"><strong>of</strong></h3>
<p>为非null值创建一个Optional</p>
<pre><code class="language-java">User user = new User();
Optional&lt;String&gt; userName = Optional.of(&quot;aaa&quot;);
 //传入参数为null，抛出NullPointerException.
Optional&lt;String&gt; nullValue = Optional.of(null);
</code></pre>
<h3 id="ofnullable"><strong>ofNullable</strong></h3>
<p>为指定值创建一个Optional，如果指定值为null，则返回一个空的Optional</p>
<pre><code class="language-java">//创建一个不包含任何值的Optional实例
//输出Optional.empty
Optional b = Optional.ofNullable(null);
</code></pre>
<h3 id="ispresent"><strong>isPresent</strong></h3>
<p>检查之是否存在，存在返回true，否则返回false</p>
<pre><code class="language-java">Optional&lt;String&gt; userName = Optional.of(&quot;aaa&quot;);
if (userName.isPresent()){
    //输出aaa
    System.out.println(userName.get());
}
Optional em = Optional.ofNullable(null);
//em.isPresent()为false
if (em.isPresent()){
        System.out.println(em.get());
}
</code></pre>
<h3 id="get"><strong>get</strong></h3>
<p>Optional有值则将其返回，否则抛出NoSuchElementException。</p>
<pre><code class="language-java">Optional em = Optional.ofNullable(null);
em.get();
![](https://tytangyi.github.io//post-images/1596277400482.png)
</code></pre>
<pre><code class="language-java">Optional em = Optional.ofNullable(null);
try {
    System.out.println(em.get());
}catch (NoSuchElementException e){
    System.out.println(e.getMessage());//输出No value present
}
</code></pre>
]]></content>
    </entry>
</feed>